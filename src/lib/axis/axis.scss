.axis .title {
  letter-spacing: 0.5em;
  font-size: 1.15em;
  font-weight: bold;
}

.axis .ticks .domain,
.axis .tick line {
  stroke: black;
}

.axis .ticks .domain {
  fill: none;
}

.axis {
  opacity: 1;
  // Fade in after transitions
  transition: opacity 0.5s; 
}

// Hide axes during transitions
.transition .axis {
  opacity: 0;
  transition: opacity 0s;
}

.axis .ticks text {
  transition: transform $transitionDuration;
}

.transition .axis .ticks text {
  // Snap text to correct positions during transitions
  transition: transform 0s;  
}

.left-axis {
  display: grid;
  grid-template-columns: [titleStart] auto [titleEnd margin] 0px [ticksStart] auto [ticksEnd];
}

.left-axis .ticks {
  width: min-content;
  grid-column: ticksStart / ticksEnd;
  grid-row: 1 / 2;
}

.left-axis .ticks text {
  // Rotate labels on narrow screens
  transform: translate(0, -0.3em) rotate(-45deg);
  text-anchor: end;
}

.left-axis .title {
  // Rotate title 
  transform: translate(0.7em, 0) rotate(-90deg);
  text-anchor: end;

  height: min-content;
  width: min-content;
  grid-column: titleStart / titleEnd;
  grid-row: 1 / 2;
  align-self: center;
}

.bottom-axis {
  display: grid;
  grid-template-rows: [ticksStart] auto [ticksEnd margin] 0px [titleStart] auto [titleEnd];
}

.bottom-axis .ticks {
  height: min-content;
  grid-column: 1 / 2;
  grid-row: ticksStart / ticksEnd;
}

.bottom-axis .ticks text {
  transform: translate(0, 0.5em) rotate(-45deg);
  text-anchor: end;
}

.bottom-axis .title {
  transform: translate(0, 0.7em);
  height: min-content;
  width: min-content;
  grid-column: 1 / 2;
  grid-row: titleStart / titleEnd;
  justify-self: center;
}

.top-axis {
  display: grid;
  grid-template-rows: [titleStart] auto [titleEnd margin] 0px [ticksStart] auto [ticksEnd];
}

.top-axis .ticks {
  height: min-content;
  grid-column: 1 / 2;
  grid-row: ticksStart / ticksEnd;
}

.top-axis .ticks text {
  transform: translate(0, 0) rotate(45deg);
  text-anchor: end;
}

.top-axis .title {
  transform: translate(0, 0.7em);
  height: min-content;
  width: min-content;
  grid-column: 1 / 2;
  grid-row: titleStart / titleEnd;
  justify-self: center;
}

.right-axis {
  display: grid;
  grid-template-columns: [ticksStart] auto [ticksEnd margin] 0px [titleStart] auto [titleEnd];
}

.right-axis .ticks {
  width: min-content;
  grid-column: ticksStart / ticksEnd;
  grid-row: 1 / 2;
}

.right-axis .ticks text {
  transform: translate(0, -0.3em) rotate(45deg);
  text-anchor: start;
}

.right-axis .title {
  transform: translate(0.7em, 0) rotate(-90deg);
  text-anchor: end;

  height: min-content;
  width: min-content;
  grid-column: titleStart / titleEnd;
  grid-row: 1 / 2;
  align-self: center;
}

@media screen and (min-width: 50rem) {
  .left-axis {
    grid-template-columns: [titleStart] auto [titleEnd margin] 15px [ticksStart] auto [ticksEnd];
  }

  .left-axis .ticks text {
    transform: translate(0, 0.3em);
  }

  .bottom-axis {
    grid-template-rows: [ticksStart] auto [ticksEnd margin] 15px [titleStart] auto [titleEnd];
  }

  .bottom-axis .ticks text {
    transform: translate(0, 0.7em) rotate(0deg);
    text-anchor: middle;
  }

  .top-axis {
    grid-template-rows: [titleStart] auto [titleEnd margin] 15px [ticksStart] auto [ticksEnd];
  }

  .top-axis .ticks text {
    transform: rotate(0deg);
    text-anchor: middle;
  }

  .right-axis {
    grid-template-columns: [ticksStart] auto [ticksEnd margin] 15px [titleStart] auto [titleEnd];
  }

  .right-axis .ticks text {
    transform: translate(0, 0.3em);
  }
}
